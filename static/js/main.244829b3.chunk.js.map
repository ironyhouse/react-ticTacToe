{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"4MASA,SAASA,EAAOC,GAEZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACzCF,EAAMG,O,IAKTC,E,qLAEWC,GAAI,IAAD,OACZ,OACA,kBAACN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAMtC,OACA,6BACI,yBAAKJ,UAAU,aACdK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEnB,yBAAKP,UAAU,aACdK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEnB,yBAAKP,UAAU,aACdK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA3BXC,IAAMC,WAkCpBC,E,YAEN,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KACDY,MAAQ,CACbC,QAAS,CACL,CACAN,QAASO,MAAM,GAAGC,KAAK,QAG3BC,WAAY,EACZC,SAAS,GATM,E,yEAaPZ,GAER,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAIxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACdR,QAASA,EAAQS,OAAO,CACpB,CACAf,QAASA,KAGbS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,6BAIlBM,GACHjB,KAAKe,SAAS,CACdL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAIlB,IAiBFC,EAjBC,OACCX,EAAUP,KAAKM,MAAMC,QAErBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GACjC,IAAMC,EAAOD,EACT,eAAiBA,EACjB,eACJ,OACQ,yBAAKE,IAAKF,GACN,yBAAK3B,QAAS,kBAAM,EAAK8B,OAAOH,KAAQC,OAcpD,OANAN,EAFIE,EAEK,WAAaA,EAGb,iBAAmBpB,KAAKM,MAAMK,QAAU,IAAM,KAIvD,yBAAKhB,UAAU,QAEX,yBAAKA,UAAU,aACX,4BAAKuB,IAET,yBAAKvB,UAAU,cACX,kBAACG,EAAD,CACIG,QAASkB,EAAQlB,QACjBL,QAAS,SAAAG,GAAC,OAAI,EAAK4B,YAAY5B,OAGvC,yBAAMJ,UAAU,cAAc0B,Q,GAjFnBlB,IAAMC,WA4FzB,SAASU,EAAgBb,GAWzB,IAVA,IAAM2B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CAAC,IAAD,cACjB6B,EAAM7B,GADW,GAC5B8B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACtE,OAAO9B,EAAQ4B,GAGnB,OAAO,KApBPG,IAASC,OAAO,kBAAC5B,EAAD,MAAU6B,SAASC,eAAe,U","file":"static/js/main.244829b3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n/*  \n    Компонент Square отображает одиночную кнопку <button>, а Board отображает 9 квадратов. \n    Компонент Game отображает Board со значениями чисел-заполнителей. \n*/\nfunction Square(props) {\n    /* Заполняет компонент Square значением, когда мы щелкаем по нему */\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n        </button>\n    );\n}\n  \nclass Board extends React.Component {\n    /*  эта функция будет вызываться при нажатии на квадрат */\n    renderSquare(i) {\n        return (\n        <Square\n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n        />\n        );\n    }\n\n    render() {\n        return (\n        <div>\n            <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n            </div>\n        </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    /* заполняем массив значениями null */\nconstructor(props) {\n    super(props);\n    this.state = {\n    history: [\n        {\n        squares: Array(9).fill(null)\n        }\n    ],\n    stepNumber: 0,\n    xIsNext: true\n    };\n}\n/* Игнорируем клики если кто-то выйграл или все квадраты заполнены */\nhandleClick(i) {\n    /* Cоздаем копию массива квадратов, вместо изменения существующего массива */\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n    return;\n    }\n    /* чередование «Х» и «О» */\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n    history: history.concat([\n        {\n        squares: squares\n        }\n    ]),\n    stepNumber: history.length,\n    xIsNext: !this.state.xIsNext\n    });\n}\n/* Вернуться на орпеделенный ход */\njumpTo(step) {\n    this.setState({\n    stepNumber: step,\n    xIsNext: (step % 2) === 0\n    });\n}\n\nrender() {\n    const history = this.state.history;\n    /*  отрисовывает ход */\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n    const desc = move ?\n        'Go to move #' + move :\n        'Restart Game';\n    return (\n            <div key={move}>\n                <div onClick={() => this.jumpTo(move)}>{desc}</div>\n            </div>\n        );\n    });\n\n    let status;\n    if (winner) {\n    /* Отображаем Победителя  */ \n    status = \"Winner: \" + winner;\n    } else {\n    /* Отображаем какой игрок должен ходить  */ \n    status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n    <div className=\"game\">\n\n        <div className=\"game-info\">\n            <h2>{status}</h2>\n        </div>  \n        <div className=\"game-board\">\n            <Board\n                squares={current.squares}\n                onClick={i => this.handleClick(i)}\n            />\n        </div>\n        <div  className=\"game-moves\">{moves}</div>\n\n    </div>\n    );\n}\n}\n\n// ========================================\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n/* Проверка победителя */\nfunction calculateWinner(squares) {\nconst lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n];\nfor (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n    return squares[a];\n    }\n}\nreturn null;\n}\n  "],"sourceRoot":""}